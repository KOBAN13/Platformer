//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputSystem/NewInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInputSystem"",
    ""maps"": [
        {
            ""name"": ""MoveUpCamera"",
            ""id"": ""06aa47aa-aabe-4e5e-a252-44a4f841c03f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9969acb5-2b94-478e-b20e-7c6725789997"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""15b18c03-c67e-4da0-b63c-77d1ab979fb9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""936c4f9c-5c55-4c5f-83e6-1098167bf539"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a2f68dc-8d8f-4ead-aa54-68535d1715eb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3e4e9d1d-d642-40de-94f9-2bc52d87ca52"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc28ef15-df2c-4593-b957-0ad60c9c0119"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""d8387240-e50d-4ef9-9de4-cc4f83286493"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b68cad20-0b7d-4597-8775-46db2f89265e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36ebc501-26fc-4fac-9920-553b5a151a81"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Jump"",
            ""id"": ""2fa1cf12-0bfc-4bba-8155-c33049560cf3"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""83652de2-8241-4fa5-9015-f0198323bbd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42e4feaa-c3f9-499c-8084-89e196f7e5fb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MoveSide"",
            ""id"": ""42d65513-6ff0-4d6d-a97a-006453d6c6bb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3dd4b12f-05ae-41c4-8e06-f1e5c92cc15c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fa051842-dd64-4c0c-a697-86026b8e69e3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""195e33be-cecf-4e8a-9dcb-d1e5f5bdaee6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2eba8615-33b6-47b7-a34e-4dba1411b837"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ChangeCamera"",
            ""id"": ""2fcb8990-ad67-45bc-a36e-7374d28d023e"",
            ""actions"": [
                {
                    ""name"": ""LeftCameras"",
                    ""type"": ""Button"",
                    ""id"": ""723a75f6-7fff-439b-96e1-757a186cba39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightCameras"",
                    ""type"": ""Button"",
                    ""id"": ""90e47c00-95e6-4b1b-9736-93aeac34b962"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b5938c3-0fba-4996-aa85-cfaa3685f252"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef1af4e0-a02b-44f0-966b-21cec7856f53"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseDelta"",
            ""id"": ""667bca45-d9b8-4428-baef-255449aa1109"",
            ""actions"": [
                {
                    ""name"": ""Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""598fad37-e7ad-401c-927c-ee5d59ae0873"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76f844ba-2b8b-4aae-9829-38c8365393d2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkipStartGame"",
            ""id"": ""3a25c0e3-8965-44b9-8c0c-b9ad1ea26ca8"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""93e67a38-11bb-49b6-9684-beb2d9e551a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""daca71dc-a707-4e2e-b2ec-d273e8e8fe28"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveUpCamera
        m_MoveUpCamera = asset.FindActionMap("MoveUpCamera", throwIfNotFound: true);
        m_MoveUpCamera_Move = m_MoveUpCamera.FindAction("Move", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
        // Jump
        m_Jump = asset.FindActionMap("Jump", throwIfNotFound: true);
        m_Jump_Jump = m_Jump.FindAction("Jump", throwIfNotFound: true);
        // MoveSide
        m_MoveSide = asset.FindActionMap("MoveSide", throwIfNotFound: true);
        m_MoveSide_Move = m_MoveSide.FindAction("Move", throwIfNotFound: true);
        // ChangeCamera
        m_ChangeCamera = asset.FindActionMap("ChangeCamera", throwIfNotFound: true);
        m_ChangeCamera_LeftCameras = m_ChangeCamera.FindAction("LeftCameras", throwIfNotFound: true);
        m_ChangeCamera_RightCameras = m_ChangeCamera.FindAction("RightCameras", throwIfNotFound: true);
        // MouseDelta
        m_MouseDelta = asset.FindActionMap("MouseDelta", throwIfNotFound: true);
        m_MouseDelta_Delta = m_MouseDelta.FindAction("Delta", throwIfNotFound: true);
        // SkipStartGame
        m_SkipStartGame = asset.FindActionMap("SkipStartGame", throwIfNotFound: true);
        m_SkipStartGame_Skip = m_SkipStartGame.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveUpCamera
    private readonly InputActionMap m_MoveUpCamera;
    private IMoveUpCameraActions m_MoveUpCameraActionsCallbackInterface;
    private readonly InputAction m_MoveUpCamera_Move;
    public struct MoveUpCameraActions
    {
        private @NewInputSystem m_Wrapper;
        public MoveUpCameraActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoveUpCamera_Move;
        public InputActionMap Get() { return m_Wrapper.m_MoveUpCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveUpCameraActions set) { return set.Get(); }
        public void SetCallbacks(IMoveUpCameraActions instance)
        {
            if (m_Wrapper.m_MoveUpCameraActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MoveUpCameraActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MoveUpCameraActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MoveUpCameraActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MoveUpCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MoveUpCameraActions @MoveUpCamera => new MoveUpCameraActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private IPauseActions m_PauseActionsCallbackInterface;
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @NewInputSystem m_Wrapper;
        public PauseActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void SetCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PauseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Jump
    private readonly InputActionMap m_Jump;
    private IJumpActions m_JumpActionsCallbackInterface;
    private readonly InputAction m_Jump_Jump;
    public struct JumpActions
    {
        private @NewInputSystem m_Wrapper;
        public JumpActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Jump_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Jump; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpActions set) { return set.Get(); }
        public void SetCallbacks(IJumpActions instance)
        {
            if (m_Wrapper.m_JumpActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_JumpActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_JumpActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_JumpActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_JumpActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public JumpActions @Jump => new JumpActions(this);

    // MoveSide
    private readonly InputActionMap m_MoveSide;
    private IMoveSideActions m_MoveSideActionsCallbackInterface;
    private readonly InputAction m_MoveSide_Move;
    public struct MoveSideActions
    {
        private @NewInputSystem m_Wrapper;
        public MoveSideActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoveSide_Move;
        public InputActionMap Get() { return m_Wrapper.m_MoveSide; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveSideActions set) { return set.Get(); }
        public void SetCallbacks(IMoveSideActions instance)
        {
            if (m_Wrapper.m_MoveSideActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MoveSideActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MoveSideActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MoveSideActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MoveSideActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MoveSideActions @MoveSide => new MoveSideActions(this);

    // ChangeCamera
    private readonly InputActionMap m_ChangeCamera;
    private IChangeCameraActions m_ChangeCameraActionsCallbackInterface;
    private readonly InputAction m_ChangeCamera_LeftCameras;
    private readonly InputAction m_ChangeCamera_RightCameras;
    public struct ChangeCameraActions
    {
        private @NewInputSystem m_Wrapper;
        public ChangeCameraActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftCameras => m_Wrapper.m_ChangeCamera_LeftCameras;
        public InputAction @RightCameras => m_Wrapper.m_ChangeCamera_RightCameras;
        public InputActionMap Get() { return m_Wrapper.m_ChangeCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangeCameraActions set) { return set.Get(); }
        public void SetCallbacks(IChangeCameraActions instance)
        {
            if (m_Wrapper.m_ChangeCameraActionsCallbackInterface != null)
            {
                @LeftCameras.started -= m_Wrapper.m_ChangeCameraActionsCallbackInterface.OnLeftCameras;
                @LeftCameras.performed -= m_Wrapper.m_ChangeCameraActionsCallbackInterface.OnLeftCameras;
                @LeftCameras.canceled -= m_Wrapper.m_ChangeCameraActionsCallbackInterface.OnLeftCameras;
                @RightCameras.started -= m_Wrapper.m_ChangeCameraActionsCallbackInterface.OnRightCameras;
                @RightCameras.performed -= m_Wrapper.m_ChangeCameraActionsCallbackInterface.OnRightCameras;
                @RightCameras.canceled -= m_Wrapper.m_ChangeCameraActionsCallbackInterface.OnRightCameras;
            }
            m_Wrapper.m_ChangeCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftCameras.started += instance.OnLeftCameras;
                @LeftCameras.performed += instance.OnLeftCameras;
                @LeftCameras.canceled += instance.OnLeftCameras;
                @RightCameras.started += instance.OnRightCameras;
                @RightCameras.performed += instance.OnRightCameras;
                @RightCameras.canceled += instance.OnRightCameras;
            }
        }
    }
    public ChangeCameraActions @ChangeCamera => new ChangeCameraActions(this);

    // MouseDelta
    private readonly InputActionMap m_MouseDelta;
    private IMouseDeltaActions m_MouseDeltaActionsCallbackInterface;
    private readonly InputAction m_MouseDelta_Delta;
    public struct MouseDeltaActions
    {
        private @NewInputSystem m_Wrapper;
        public MouseDeltaActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Delta => m_Wrapper.m_MouseDelta_Delta;
        public InputActionMap Get() { return m_Wrapper.m_MouseDelta; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseDeltaActions set) { return set.Get(); }
        public void SetCallbacks(IMouseDeltaActions instance)
        {
            if (m_Wrapper.m_MouseDeltaActionsCallbackInterface != null)
            {
                @Delta.started -= m_Wrapper.m_MouseDeltaActionsCallbackInterface.OnDelta;
                @Delta.performed -= m_Wrapper.m_MouseDeltaActionsCallbackInterface.OnDelta;
                @Delta.canceled -= m_Wrapper.m_MouseDeltaActionsCallbackInterface.OnDelta;
            }
            m_Wrapper.m_MouseDeltaActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }
        }
    }
    public MouseDeltaActions @MouseDelta => new MouseDeltaActions(this);

    // SkipStartGame
    private readonly InputActionMap m_SkipStartGame;
    private ISkipStartGameActions m_SkipStartGameActionsCallbackInterface;
    private readonly InputAction m_SkipStartGame_Skip;
    public struct SkipStartGameActions
    {
        private @NewInputSystem m_Wrapper;
        public SkipStartGameActions(@NewInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skip => m_Wrapper.m_SkipStartGame_Skip;
        public InputActionMap Get() { return m_Wrapper.m_SkipStartGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkipStartGameActions set) { return set.Get(); }
        public void SetCallbacks(ISkipStartGameActions instance)
        {
            if (m_Wrapper.m_SkipStartGameActionsCallbackInterface != null)
            {
                @Skip.started -= m_Wrapper.m_SkipStartGameActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_SkipStartGameActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_SkipStartGameActionsCallbackInterface.OnSkip;
            }
            m_Wrapper.m_SkipStartGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }
        }
    }
    public SkipStartGameActions @SkipStartGame => new SkipStartGameActions(this);
    public interface IMoveUpCameraActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IJumpActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IMoveSideActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IChangeCameraActions
    {
        void OnLeftCameras(InputAction.CallbackContext context);
        void OnRightCameras(InputAction.CallbackContext context);
    }
    public interface IMouseDeltaActions
    {
        void OnDelta(InputAction.CallbackContext context);
    }
    public interface ISkipStartGameActions
    {
        void OnSkip(InputAction.CallbackContext context);
    }
}
